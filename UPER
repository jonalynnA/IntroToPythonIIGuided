# Return the " centered" average of an array of ints, which we'll say is the
# mean average of the values, except ignoring the largest and smallest values
# in the array

# centered_avereage([1, 2, 3, 4, 100]) -> 3
# centered_average([1, 1, 5, 5, 10, 8, 7]) -> 5
# centered_average([-10, -4, -2, -4, -2, 0]) -> -3

Use UPER to solve any problem
1. Understand the propblem
2. Plan
3. Execute
4. Reflect
--------------------------------
Understand
# What about multiple smallest values?
    # Just ignore one of them

# How large?
    # No limit

# Speed issues?
    # No worries

# All INTs?
    # Yes

# Fewer than 3 elements?
    # Will always be 3 or more

# Number size:
    # Arbitrarily large

# Can I use other libraries?
    # No

# Will the list always be sorted?
    # No, you can use .sort()

# Type of return value? Are we returning floats or ints? 
# (normal division " /" or floor division " // ")
    # Floating point

# Can we use min and max?
    # Yes
--------------------------------
Plan
1. Sort
2. Slice
3. Average
---------------------------------
Execute & Reflect
---------------------------------

NOTE: This next example is incomplete

A random 2D grid with some random stars strewn about. Have a player position marked on the grid with some spaceship shape. Allow the player to move by typing a keypad-direction number, 1-9. Don't allow moving into stars.

. . . . . . . . . . . . . . .
. . . . . * . . . . . * . . .
. . . . . . . . . . . . . . .
. * . . . . . . * . . . . . .
. . . . . . . . . . Y . . . .
. . . . . . . * . . . . . . .
. . . . . . . . . * . . . . .

What direction is each number going to be?
Can you move diagnol?
What does Y do?
How do you win?
What happens when a user presses a button where a star is located?
How big is the spaceship?
What's the min and max amount of stars?
Is the edge of the map the end or warp back to other side?
Do the stars randomize?
Can you destroy stars?
If you don't have a numberpad can there be letter equivalents?
